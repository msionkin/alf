define(["dojo/_base/declare","alfresco/core/Core","alfresco/services/_PreferenceServiceTopicMixin","dojo/_base/lang","dojo/sniff","dijit/registry","alfresco/dialogs/AlfDialog","alfresco/buttons/AlfButton"],function(h,d,g,c,m,a,o,l){return h([d,g],{i18nRequirements:[{i18nFile:"./i18n/LoggingService.properties"}],loggingPreferencesId:"org.alfresco.share.logging",logSubscriptionHandle:null,constructor:function j(q){this.alfSubscribe("ALF_LOGGING_STATUS_CHANGE",c.hitch(this,"onLoggingStatusChange"));this.alfSubscribe("ALF_UPDATE_LOGGING_PREFERENCES",c.hitch(this,"onDetailsDialog"));this.alfPublish(this.getPreferenceTopic,{preference:this.loggingPreferencesId,callback:this.setLoggingStatus,callbackScope:this})},onLoggingStatusChange:function n(q){if(c.exists("selected",q)&&c.exists("value",q)){this.alfPublish(this.setPreferenceTopic,{preference:this.loggingPreferencesId+"."+q.value,value:(q.selected==true)});this.loggingPreferences[q.value]=(q.selected==true);this.handleSubscription()}},setLoggingStatus:function p(q){if(q==null){q={}}this.loggingPreferences=q;this.handleSubscription()},handleSubscription:function f(){if(this.loggingPreferences.enabled&&this.logSubscriptionHandle==null){this.logSubscriptionHandle=this.alfSubscribe(this.alfLoggingTopic,c.hitch(this,"onLogRequest"))}else{if(!this.loggingPreferences.enabled&&this.logSubscriptionHandle!=null){this.alfUnsubscribe(this.logSubscriptionHandle);this.logSubscriptionHandle=null}}},detailsDialog:null,saveLoggingPrefsUpdateTopic:"ALF_SAVE_LOGGING_PREFERNCES_UPDATE",cancelLoggingPrefsUpdateTopic:"ALF_CANCEL_LOGGING_PREFERNCES_UPDATE",onDetailsDialog:function k(q){if(this.detailsDialog==null){this.alfSubscribe(this.saveLoggingPrefsUpdateTopic,c.hitch(this,"onPrefsUpdateSave"));this.alfSubscribe(this.cancelLoggingPrefsUpdateTopic,c.hitch(this,"onPrefsUpdateCancel"));this.detailsDialog=new o({title:this.message("logging.preferences.title"),widgetsContent:[{name:"alfresco/forms/controls/DojoValidationTextBox",config:{id:this.id+"_LOGGING_FILTER",name:"filter",label:this.message("filter.label"),description:this.message("filter.description"),value:(this.loggingPreferences.filter!=null)?this.loggingPreferences.filter:""}}],widgetsButtons:[{name:"alfresco/buttons/AlfButton",config:{label:this.message("button.save-logging-prefs"),publishTopic:this.saveLoggingPrefsUpdateTopic,publishPayload:q}},{name:"alfresco/buttons/AlfButton",config:{label:this.message("button.cancel-logging-prefs-update"),publishTopic:this.cancelLoggingPrefsUpdateTopic,publishPayload:q}}]})}this.detailsDialog.show()},onPrefsUpdateSave:function i(r){var q=a.byId(this.id+"_LOGGING_FILTER");if(q!=null){var s=q.getValue();this.alfPublish(this.setPreferenceTopic,{preference:this.loggingPreferencesId+".filter",value:s});this.loggingPreferences.filter=s}},onPrefsUpdateCancel:function b(r){var q=a.byId(this.id+"_LOGGING_FILTER");if(q!=null){var s=q.setValue((this.loggingPreferences.filter!=null)?this.loggingPreferences.filter:"")}},loggingPreferences:null,onLogRequest:function e(w){if(w&&w.severity&&w.messageArgs&&(this.loggingPreferences.all==true||this.loggingPreferences[w.severity]==true)){if(typeof console[w.severity]!="function"&&(!m("ie")>9)){console.error("The supplied severity is not a function of console",w.severity)}else{var t=w.callerName;if(t&&t!=""){var v=t.lastIndexOf("__"),r=/([^_])(_){1}/g;if(v!=-1){var s=t.substring(0,v);var u=t.substring(v+2);t=s.replace(r,"$1/")+"["+u+"] >> "}else{t=t+" >> "}}else{t=""}var q=true;if(this.loggingPreferences.filter!=null){var x=new RegExp(this.loggingPreferences.filter);q=x.test(t)}if(q){w.messageArgs[0]=t+w.messageArgs[0];if(m("ie")<=9){if(w.severity=="error"){console.error(w.messageArgs)}else{console.log(w.messageArgs)}}else{console[w.severity].apply(console,w.messageArgs)}}}}}})});