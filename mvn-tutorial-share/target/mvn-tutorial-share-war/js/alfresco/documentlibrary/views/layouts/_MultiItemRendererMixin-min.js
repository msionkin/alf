define(["dojo/_base/declare","alfresco/core/Core","alfresco/core/ObjectTypeUtils","alfresco/documentlibrary/_AlfDocumentListTopicMixin","dojo/dom-class","dojo/_base/array","dojo/_base/lang","dojo/dom-style"],function(w,o,q,c,l,h,x,s){return w([o,c],{cssRequirements:[{cssFile:"./css/_MultiItemRendererMixin.css"}],currentData:null,currentIndex:null,currentItem:null,setData:function m(y){this.currentData=y},renderData:function g(){if(this.rootWidgetSubscriptions==null){this.rootWidgetSubscriptions=[]}h.forEach(this.rootWidgetSubscriptions,function(z,y){if(typeof z.remove==="function"){z.remove()}});if(this.currentData&&this.currentData.items){this.alfLog("log","Rendering data",this.currentData.items);this.currentIndex=0;this.currentItem=this.currentData.items[this.currentIndex];h.forEach(this.currentData.items,x.hitch(this,"renderNextItem"));this.allItemsRendered()}else{this.alfLog("warn","No data to render!")}},rootViewWidget:null,renderNextItem:function p(){this.alfLog("log","Rendering item",this.currentData.items[this.currentIndex]);if(this.width!=null){s.set(this.domNode,"width",this.width)}if(this.containerNode!=null){this.processWidgets(this.widgets,this.containerNode)}else{this.alfLog("warn","There is no 'containerNode' for adding an item to")}},allWidgetsProcessed:function f(y){this.currentIndex++;if(this.currentData&&this.currentData.items&&this.currentData.items.length!=null){h.forEach(y,x.hitch(this,"rootWidgetProcessing"));if(this.currentIndex<this.currentData.items.length){this.currentItem=this.currentData.items[this.currentIndex]}}else{}},allItemsRendered:function j(){},rootWidgetSubscriptions:null,rootWidgetProcessing:function t(z,y){l.add(z.domNode,"alfresco-documentlibrary-views-layout-_MultiItemRendererMixin--item");this.rootWidgetSubscriptions.push(this.alfSubscribe(this.documentSelectedTopic,x.hitch(this,"onItemSelection",z)));this.rootWidgetSubscriptions.push(this.alfSubscribe(this.documentDeselectedTopic,x.hitch(this,"onItemDeselection",z)))},onItemSelection:function v(y,z){if(this.compareItems(y.currentItem,z.value)){l.add(y.domNode,"selected")}},onItemDeselection:function e(y,z){if(this.compareItems(y.currentItem,z.value)){l.remove(y.domNode,"selected")}},compareItems:function a(z,y){return(z.nodeRef!=null&&(z.nodeRef==y.nodeRef))},createWidget:function i(y,z,B,A){if(y==null||y.config==null){y.config={}}if(this.currentItem!=null){if(typeof this.currentItem.jsNode==="undefined"&&this.currentItem.node!=null){this.currentItem.jsNode=new Alfresco.util.Node(this.currentItem.node)}y.config.currentItem=this.currentItem;this.inherited(arguments)}},filterWidget:function k(A){var z=true;if(A.config&&A.config.renderFilter){z=false;var y=A.config.renderFilter;if(!q.isArray(y)){this.alfLog("warn","A request was made to filter a widget, but the filter configuration was not an array",this,A)}else{z=h.every(y,x.hitch(this,"processFilterConfig"))}}else{this.alfLog("log","A request was made to filter a widget but the configuration does not have a 'config.renderFilter' attribute.",this,A)}return z},processFilterConfig:function(C,z){var y=false;if(this.filterPropertyExists(C)){var A=this.getRenderFilterPropertyValue(C),B=this.getRenderFilterValues(C);y=h.some(B,x.hitch(this,"processFilter",C,A))}else{if(C.renderOnAbsentProperty==true){y=true}else{this.alfLog("log","A request was made to filter a widget but the configured filter is not a property of the current item",this,C)}}return y},processFilter:function n(A,z,y){if(q.isString(y)){y=x.trim(y)}if(A.negate==null||A.negate==false){return y==z}else{return y!=z}},filterPropertyExists:function b(y){return(q.isString(y.property)&&q.isObject(this.currentItem)&&x.exists(y.property,this.currentItem))},getRenderFilterPropertyValue:function u(y){return x.getObject(y.property,false,this.currentItem)},getCustomRenderFilterProperty:function r(z){var y=null;if(z instanceof Boolean||typeof z=="boolean"){y=z?"folder":"document"}return y},getRenderFilterValues:function d(z){var y=null;if(q.isArray(z.values)){y=z.values}else{if(q.isString(z.values)){y=[z.values]}else{y=[]}}return y}})});